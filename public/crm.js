// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuth() {
    try {
        const response = await fetch('/api/check-auth');
        if (!response.ok) {
            window.location.href = '/';
            return false;
        }
        return true;
    } catch (error) {
        window.location.href = '/';
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–ø–∫–∏
async function loadHeader() {
    try {
        const response = await fetch('/components/header.html');
        const headerHTML = await response.text();
        
        const headerContainer = document.getElementById('header-container');
        if (headerContainer) {
            headerContainer.innerHTML = headerHTML;
            initLogout();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const authResponse = await fetch('/api/check-auth');
            if (authResponse.ok) {
                const result = await authResponse.json();
                const userElement = document.getElementById('currentUser');
                if (userElement && result.user) {
                    userElement.textContent = result.user.username;
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–ø–∫–∏:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
function initLogout() {
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', async function() {
            try {
                const response = await fetch('/api/logout', {
                    method: 'POST'
                });
                
                const result = await response.json();
                if (result.success) {
                    window.location.href = '/';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            }
        });
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â—É—é —à–∞–ø–∫—É
    loadHeader();
    
    const addClientBtn = document.getElementById('addClientBtn');
    const clientsBody = document.getElementById('clientsBody');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    checkAuth();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadClients();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    addClientBtn.addEventListener('click', function() {
        window.location.href = '/add-client';
    });
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    async function loadClients() {
        try {
            const response = await fetch('/api/clients');
            const clients = await response.json();
            
            renderClients(clients);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
            showEmptyState();
        }
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    function renderClients(clients) {
        if (!clients || clients.length === 0) {
            showEmptyState();
            return;
        }
        
        clientsBody.innerHTML = clients.map(client => {
            const deadlineText = getDeadlineText(client);
            const daysPassedClass = getDaysPassedClass(client);
            
            return `
                <tr>
                    <td>
                        <div class="client-info">
                            <div class="client-id">${client.client_id || 'ID –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                            <div class="project-name">${client.project_name}</div>
                        </div>
                    </td>
                    <td>${client.client_contact}</td>
                    <td><span class="status ${getStatusClass(client.status)}">${client.status}</span></td>
                    <td>${formatPrice(client.price)}</td>
                    <td>
                        <div class="date-info">
                            <div class="created-date">${formatDate(client.date_created)}</div>
                            <div class="days-passed ${daysPassedClass}">
                                ${client.days_passed || 0} –¥–Ω. –Ω–∞–∑–∞–¥
                            </div>
                            ${deadlineText ? `<div class="deadline-info">${deadlineText}</div>` : ''}
                        </div>
                    </td>
                    <td class="actions">
                        <button class="btn-edit" onclick="editClient(${client.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                        <button class="btn-delete" onclick="deleteClient(${client.id})">–£–¥–∞–ª–∏—Ç—å</button>
                    </td>
                </tr>
            `;
        }).join('');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞
    function getDeadlineText(client) {
        if (!client.deadline_days) return '';
        
        const daysPassed = client.days_passed || 0;
        const daysLeft = client.deadline_days - daysPassed;
        
        if (daysLeft < 0) {
            return `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${Math.abs(daysLeft)} –¥–Ω.`;
        } else if (daysLeft === 0) {
            return `üî• –î–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è!`;
        } else if (daysLeft <= 3) {
            return `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω.`;
        } else {
            return `üìÖ –û—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω.`;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –¥–Ω–µ–π
    function getDaysPassedClass(client) {
        const daysPassed = client.days_passed || 0;
        
        if (daysPassed <= 1) return 'days-new';
        if (daysPassed <= 7) return 'days-week';
        if (daysPassed <= 30) return 'days-month';
        return 'days-old';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    function formatPrice(price) {
        if (!price) return '‚Äî';
        return '$' + new Intl.NumberFormat('en-US').format(price);
    }
    
    // –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    function showEmptyState() {
        clientsBody.innerHTML = `
            <tr>
                <td colspan="6" style="text-align: center; padding: 40px; color: #6e6e73;">
                    –ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ!
                </td>
            </tr>
        `;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getStatusClass(status) {
        const statusMap = {
            '–ù–æ–≤—ã–π': 'new',
            '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –¢–ó': 'discussion',
            '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã': 'payment',
            '–í —Ä–∞–±–æ—Ç–µ': 'progress',
            '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ': 'review',
            '–î–æ—Ä–∞–±–æ—Ç–∫–∏': 'revision',
            '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'testing',
            '–ì–æ—Ç–æ–≤ –∫ —Å–¥–∞—á–µ': 'ready',
            '–ó–∞–≤–µ—Ä—à–µ–Ω': 'completed',
            '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω': 'paused',
            '–û—Ç–º–µ–Ω–µ–Ω': 'cancelled'
        };
        return statusMap[status] || 'new';
    }
    
    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU');
    }
    
    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    window.editClient = function(id) {
        window.location.href = `/edit-client?id=${id}`;
    };
    
    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    window.deleteClient = async function(id) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const clientRow = document.querySelector(`button[onclick="deleteClient(${id})"]`).closest('tr');
        const clientName = clientRow.querySelector('.project-name').textContent;
        const clientId = clientRow.querySelector('.client-id').textContent;
        
        if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ "${clientId} - ${clientName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            try {
                const response = await fetch(`/api/clients/${id}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    showNotification('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
                    
                    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    clientRow.style.transition = 'opacity 0.3s ease';
                    clientRow.style.opacity = '0';
                    
                    setTimeout(() => {
                        clientRow.remove();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                        const remainingRows = document.querySelectorAll('#clientsBody tr');
                        if (remainingRows.length === 0) {
                            showEmptyState();
                        }
                    }, 300);
                    
                } else {
                    throw new Error(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
                showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            }
        }
    };
});

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        ${type === 'success' ? 'background: #34c759;' : ''}
        ${type === 'error' ? 'background: #ff3b30;' : ''}
        ${type === 'info' ? 'background: #007aff;' : ''}
    `;
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}